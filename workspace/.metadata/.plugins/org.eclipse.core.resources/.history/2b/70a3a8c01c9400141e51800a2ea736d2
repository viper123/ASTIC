package ro.info.asticlib.clustering;

import java.util.HashMap;
import java.util.List;

import ro.info.asticlib.clustering.Cluster.DistanceFormula;
import ro.info.asticlib.conf.Conf;
import ro.info.asticlib.db.Dao;

public class Clusters {
	
	
	public static Clusters instance(){
		return instance;
	}
	private static Clusters instance ;
	static{
		instance = new Clusters();
	}
	
	private Dao dao;
	
	private Clusters(){
		dao = new Dao();
	}
	
	/**
	 * Creez un cluster nou pentru fisier si maparea dintre cuvant,greutate
	 * parcurg toti clusterii si incerc sa integre noul cluster creat
	 * in caz ca nu exista alti clusteri sau nici unul nu este apropiat introduc clusterul 
	 * in colectie ca cluster idependent
	 * @param file
	 * @param wordMapWeight
	 */
	public void processFileTaging(String file,HashMap<String, Integer> wordWeightMap){
		Cluster newCluster = new Cluster(file, wordWeightMap);
		boolean integrated = false;
		for(Cluster c:getAllClusters()){
			if(c.getDistance(newCluster, DistanceFormula.Cosine)>Conf.ACCEPTABLE_DISTANCE){
				c.add(newCluster);
				integrated = true;
			}
		}
		if(!integrated){
			addIndependentCluster(newCluster);
		}
	}
	
	/**
	 * Adauga cluster c in baza de date ca cluster idependent. Asta inseamna ca nu se
	 * aseamana cu niciunul din clusterii deja prezenti
	 * @param c
	 */
	public void addIndependentCluster(Cluster newCluster){
		
	}
	
	public int generateID(){
		return dao.getLastClusterId() + 1;
	}
	
	private List<Cluster> getAllClusters(){
		return null;
	}
}
